@inject IDialogService DialogService;

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">
                Gioco in corso
            </MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudStack>
            <PlayerTurn Player="Player" />

            <Hint InitialLimits="InitialLimits" MatchLimits="MatchLimits" />

            <MudNumericField @ref="_betField"
                             Required="true"
                             Label="Scommetti"
                             HelperText="@($"Scegli un numero tra {MatchLimits.Min} e {MatchLimits.Max} (esclusi)")"
                             Min="@(MatchLimits.Min + 1)"
                             Max="@(MatchLimits.Max - 1)"
                             @bind-Value=_bet
                             OnKeyUp="OnKeyUp" />
        </MudStack>
    </MudCardContent>
    <MudCardActions>
        <MudGrid>
            <MudItem xs="12" sm="4">
                <MudButton Variant="Variant.Filled"
                           Color="@Color.Primary"
                           FullWidth="true"
                           StartIcon="@Icons.Material.Filled.Send"
                           OnClick="Bet">
                    Scommetti
                </MudButton>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudButton Variant="Variant.Filled"
                           Color="@Color.Secondary"
                           FullWidth="true"
                           StartIcon="@Icons.Material.Filled.RemoveRedEye"
                           OnClick="ConfirmPeek">
                    Sbrircia
                </MudButton>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudButton Variant="Variant.Filled"
                           Color="@Color.Error"
                           FullWidth="true"
                           StartIcon="@Icons.Material.Filled.DeleteForever"
                           OnClick="ConfirmSurrender">
                    Abbandona
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    public Player? Player { get; set; }

    [Parameter, EditorRequired]
    public required Limits InitialLimits { get; set; }

    [Parameter, EditorRequired]
    public required Limits MatchLimits { get; set; }

    [Parameter, EditorRequired]
    public required int Secret { get; set; }

    [Parameter, EditorRequired]
    public required Func<int, bool> CheckFunc { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnContinue { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<Player?> OnEnd { get; set; }

    private int _bet;

    private MudNumericField<int>? _betField;

    private async Task OnKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter") await Bet();
    }

    private async Task Bet()
    {
        var lost = CheckFunc.Invoke(_bet);
        if (lost)
        {
            await OnEnd.InvokeAsync(Player);
        }
        else
        {
            await _betField!.SelectAsync();
            await OnContinue.InvokeAsync(_bet);
        }
    }

    private async Task ConfirmPeek()
    {
        var confirm = await DialogService.ShowMessageBox("Conferma", "Vuoi davvero sbirciare il numero segreto?", yesText: "Sì", noText: "No");
        if (confirm == true)
            await DialogService.ShowMessageBox($"{Secret}", "Acqua in bocca!");
    }

    private async Task ConfirmSurrender()
    {
        var confirm = await DialogService.ShowMessageBox("Conferma", "Vuoi davvero arrenderti e terminare la partita?", yesText: "Sì", noText: "No");

        if (confirm == true)
            await OnEnd.InvokeAsync(Player);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _betField is not null)
            await _betField.SelectAsync();

        await base.OnAfterRenderAsync(firstRender);
    }
}