@inject IDialogService DialogService;

<MudStack>
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">
                    Gioco in corso
                </MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudStack>
                <PlayerTurn Player="Game.CurrentPlayer" />

                <MudStack Row="true">

                    <MudTextField Variant="Variant.Filled" Margin="Margin.Dense" Disabled="true" Label="Minimo" Value="@Game.MatchLimits.Min" Typo="Typo.h6" />

                    <MudNumericField @ref="_betField"
                                     Variant="Variant.Outlined"
                                     Required="true"
                                     Label="Scommetti"
                                     Min="@(Game.MatchLimits.Min + 1)"
                                     Max="@(Game.MatchLimits.Max - 1)"
                                     @bind-Value="_bet"
                                     OnKeyUp="OnKeyUp" />

                    <MudTextField Variant="Variant.Filled" Margin="Margin.Dense" Disabled="true" Label="Massimo" Value="@Game.MatchLimits.Max" Typo="Typo.h6" />

                </MudStack>

                <Hint InitialLimits="Game.InitialLimits" MatchLimits="Game.MatchLimits" />



            </MudStack>
        </MudCardContent>
        <MudCardActions>

            <MudButtonGroup OverrideStyles="false" FullWidth="true">
                <MudButton @ref="_betButton"
                           Variant="Variant.Filled"
                           Color="@Color.Primary"
                           FullWidth="true"
                           StartIcon="@Icons.Material.Filled.Send"
                           OnClick="Bet">
                    Scommetti
                </MudButton>

                <MudMenu Variant="Variant.Filled" Color="@Color.Primary" Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                    <MudMenuItem Icon="@Icons.Material.Filled.RemoveRedEye" IconColor="Color.Warning" OnClick="ConfirmPeek">Sbircia</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.DeleteForever" IconColor="Color.Error" OnClick="ConfirmSurrender">Abbandona</MudMenuItem>
                </MudMenu>
            </MudButtonGroup>


        </MudCardActions>
    </MudCard>
    <History Events="Game.History" />
</MudStack>

@code {
    [Parameter, EditorRequired]
    public required Game Game { get; set; }

    [Parameter, EditorRequired]
    public required Func<int, Player?, bool> CheckFunc { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnContinue { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<Player?> OnEnd { get; set; }

    private int _bet;

    private MudNumericField<int>? _betField;
    private MudButton? _betButton;

    private async Task OnKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter") await Bet();
    }

    private async Task Bet()
    {
        var lost = CheckFunc.Invoke(_bet, Game.CurrentPlayer);
        if (lost)
        {
            await OnEnd.InvokeAsync(Game.CurrentPlayer);
        }
        else
        {
            await OnContinue.InvokeAsync(_bet);
            await FocusBetField();
        }
    }

    /// <summary>
    /// Tramite un gioco di focus, permette di riselezionare il campo per la scommessa, aggiornando contemporaneamente il valore al suo interno.
    /// </summary>
    /// <returns></returns>
    private async Task FocusBetField()
    {
        await _betButton!.FocusAsync();
        await _betField!.FocusAsync();
        await _betButton!.FocusAsync();
        await _betField!.FocusAsync();
    }

    private async Task ConfirmPeek()
    {
        var confirm = await DialogService.ShowMessageBox("Conferma", "Vuoi davvero sbirciare il numero segreto?", yesText: "Sì", noText: "No");
        if (confirm == true)
            await DialogService.ShowMessageBox($"{Game.Secret}", "Acqua in bocca!");
    }

    private async Task ConfirmSurrender()
    {
        var confirm = await DialogService.ShowMessageBox("Conferma", "Vuoi davvero arrenderti e terminare la partita?", yesText: "Sì", noText: "No");

        if (confirm == true)
            await OnEnd.InvokeAsync(Game.CurrentPlayer);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _betField is not null)
            await _betField.SelectAsync();

        await base.OnAfterRenderAsync(firstRender);
    }
}