@inject IDialogService DialogService;

<MudStack>
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">
                    Gioco in corso
                </MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudStack>
                <PlayerTurn Player="Game.CurrentPlayer" />

                <Hint InitialLimits="Game.InitialLimits" MatchLimits="Game.MatchLimits" />

                <MudNumericField @ref="_betField"
                                 Required="true"
                                 Label="Scommetti"
                                 HelperText="@($"Scegli un numero tra {Game.MatchLimits.Min} e {Game.MatchLimits.Max} (esclusi)")"
                                 Min="@(Game.MatchLimits.Min + 1)"
                                 Max="@(Game.MatchLimits.Max - 1)"
                                 @bind-Value=_bet
                                 OnKeyUp="OnKeyUp" />
            </MudStack>
        </MudCardContent>
        <MudCardActions>
            <MudGrid>
                <MudItem xs="12" sm="4">
                    <MudButton Variant="Variant.Filled"
                               Color="@Color.Primary"
                               FullWidth="true"
                               StartIcon="@Icons.Material.Filled.Send"
                               OnClick="Bet">
                        Scommetti
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudButton Variant="Variant.Filled"
                               Color="@Color.Secondary"
                               FullWidth="true"
                               StartIcon="@Icons.Material.Filled.RemoveRedEye"
                               OnClick="ConfirmPeek">
                        Sbrircia
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudButton Variant="Variant.Filled"
                               Color="@Color.Error"
                               FullWidth="true"
                               StartIcon="@Icons.Material.Filled.DeleteForever"
                               OnClick="ConfirmSurrender">
                        Abbandona
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudCardActions>
    </MudCard>
    <History Events="Game.History" />
</MudStack>

@code {
    [Parameter, EditorRequired]
    public required Game Game { get; set; }

    [Parameter, EditorRequired]
    public required Func<int, Player?, bool> CheckFunc { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<int> OnContinue { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<Player?> OnEnd { get; set; }

    private int _bet;

    private MudNumericField<int>? _betField;

    private async Task OnKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter") await Bet();
    }

    private async Task Bet()
    {
        var lost = CheckFunc.Invoke(_bet, Game.CurrentPlayer);
        if (lost)
        {
            await OnEnd.InvokeAsync(Game.CurrentPlayer);
        }
        else
        {
            await _betField!.SelectAsync();
            await OnContinue.InvokeAsync(_bet);
        }
    }

    private async Task ConfirmPeek()
    {
        var confirm = await DialogService.ShowMessageBox("Conferma", "Vuoi davvero sbirciare il numero segreto?", yesText: "Sì", noText: "No");
        if (confirm == true)
            await DialogService.ShowMessageBox($"{Game.Secret}", "Acqua in bocca!");
    }

    private async Task ConfirmSurrender()
    {
        var confirm = await DialogService.ShowMessageBox("Conferma", "Vuoi davvero arrenderti e terminare la partita?", yesText: "Sì", noText: "No");

        if (confirm == true)
            await OnEnd.InvokeAsync(Game.CurrentPlayer);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _betField is not null)
            await _betField.SelectAsync();

        await base.OnAfterRenderAsync(firstRender);
    }
}